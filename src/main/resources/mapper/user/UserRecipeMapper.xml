<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ks46team03.user.mapper.UserRecipeMapper">
        <resultMap id="recipeResultMap" type="Recipe">
        <id     column="recipe_code" property="recipeCode"/>
        <result column="recipe_name" property="recipeName"/>
        <result column="recipe_category_code" property="recipeCategoryCode"/>
        <result column="member_id" property="memberId"/>
        <result column="recipe_cal" property="recipeCal"/>
        <result column="recipe_quantity" property="recipeQuantity"/>
        <result column="reg_date" property="regDate"/>
        <result column="update_at" property="updateAt"/>
        <result column="file_idx" property="fileIdx"/>
        <result column="view_count" property="viewCount"/>
        <result column="recommendation_count" property="recommendationCount"/>
        <result column="recipe_use_number" property="recipeUseNumber"/>
    </resultMap>

    <select id="getRecipeList" parameterType="String" resultType="Recipe">
        /* 레시피목록조회 */
        SELECT distinct
             r.recipe_code              as recipeCode
            ,r.recipe_name              as recipeName
            ,r.recipe_category_code     as recipeCategoryCode
            ,r.member_id                as memberId
            ,r.recipe_cal               as recipeCal
            ,r.recipe_quantity          as recipeQuantity
            ,r.reg_date                 as regDate
            ,r.view_count               as viewCount
            ,ir.ingredient_category_code as ingredientCategoryCode
        FROM
            recipe_reg as r
            INNER JOIN
            member as m
            ON r.member_id = m.member_id
            INNER JOIN
            recipe_ingredient as ri
            ON r.recipe_code = ri.recipe_code
            INNER JOIN
            ingredient_registration as ir
            ON ri.ingredient_code = ir.ingredient_code
        <where>
            <if test="searchKey != null and searchKey != ''">
                ${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
            </if>
        </where>
        GROUP BY r.recipe_code
        ORDER BY r.recipe_code;
    </select>

    <select id="getBookmarkList" parameterType="String" resultType="Bookmark">
        /* 즐겨찾기 목록조회 */
        SELECT
             rb.recipe_code              as recipeCode
            ,r.recipe_name              as recipeName
            ,r.member_id                as memberId
            ,rb.member_id               as memberId
            ,r.recipe_cal               as recipeCal
            ,r.recipe_quantity          as recipeQuantity
            ,rb.recipe_bookmarks_code   as recipeBookmarksCode
        FROM
            recipe_bookmarks as rb
            INNER JOIN
            recipe_reg as r
            ON rb.recipe_code = r.recipe_code
        WHERE
            rb.member_id = #{SID}
        ORDER BY rb.recipe_bookmarks_code;
    </select>

    <insert id="addBookmark" parameterType="String">
        /* 즐겨찾기 추가 */
        <if test="SID != null and recipeCode != null">
            INSERT INTO recipe_bookmarks
            (recipe_bookmarks_code, member_id, recipe_code, recipe_bookmarks_reg_date)
            SELECT sf_new_recipe_bookmarks_code(), #{SID}, #{recipeCode}, CURDATE()
            FROM dual
            WHERE NOT EXISTS (
            SELECT 1 FROM recipe_bookmarks
            WHERE member_id = #{SID} AND recipe_code = #{recipeCode}
            );
        </if>
    </insert>

    <delete id="removeBookmark" parameterType="String">
        /* 즐겨찾기삭제 */
        DELETE
        FROM
            recipe_bookmarks
        WHERE
            recipe_bookmarks_code = #{recipeBookmarksCode};
    </delete>

    <select id="getRecipeInfoByCode" parameterType="String" resultMap="recipeResultMap">
        /* 특정 레시피 조회 */
        SELECT
             r.recipe_code
            ,r.recipe_name
            ,r.recipe_cal
            ,r.recipe_quantity
            ,r.file_idx
            ,r.recipe_step1
            ,r.recipe_step2
            ,r.recipe_step3
            ,IFNULL(r.update_at, r.reg_date) AS reg_date
        FROM
            recipe_reg AS r
        WHERE
            r.recipe_code = #{recipeCode}
    </select>

    <update id="getViewCount" parameterType="String">
        UPDATE recipe_reg
        SET view_count = view_count + 1
        WHERE recipe_code = #{recipeCode}
    </update>

    <select id="getViewRank" parameterType="String" resultMap="recipeResultMap">
    SELECT
        rr.recipe_name
        ,rr.view_count
        ,rr.recipe_code
    FROM
        recipe_reg rr
    WHERE
        rr.reg_date >= CURDATE() - INTERVAL 1 WEEK
        and rr.view_count > 0
        order by view_count DESC
    LIMIT 3;
    </select>

    <delete id="removeRecipeById" parameterType="String">
        <!-- 레시피 삭제 -->
        DELETE FROM recipe_reg
        WHERE recipe_code = #{recipeCode}
    </delete>

    <delete id="removeRecipeListById" parameterType="String">
        <!-- 레시피 이력 삭제 -->
        DELETE FROM recipe_ingredient
        WHERE recipe_code = #{recipeCode};
    </delete>



    <update id="modifyRecipe" parameterType="Recipe">
        /* 레시피 수정 */
        UPDATE recipe_reg
        <trim prefix="SET" suffixOverrides=",">
            <if test="recipeName != null and recipeName != ''">
                recipe_name = #{recipeName},
            </if>
            <if test="recipeCategoryCode != null and recipeCategoryCode != ''">
                recipe_category_code = #{recipeCategoryCode},
            </if>
            <if test="memberId != null and memberId != ''">
                member_id = #{memberId},
            </if>
            <if test="recipeStep1 != null and recipeStep1 != ''">
                recipe_step1 = #{recipeStep1},
            </if>
            <if test="recipeStep2 != null and recipeStep2 != ''">
                recipe_step2 = #{recipeStep2},
            </if>
            <if test="recipeStep3 != null and recipeStep3 != ''">
                recipe_step3 = #{recipeStep3},
            </if>
            <if test="recipeCal != null and recipeCal != ''">
                recipe_cal = #{recipeCal},
            </if>
            <if test="fileIdx != null and fileIdx != ''">
                file_idx = #{fileIdx},
            </if>
            update_at = NOW(),

        </trim>
        WHERE
        recipe_code = #{recipeCode};
    </update>

    <insert id="addRecipe" parameterType="Recipe">
        <selectKey keyProperty="recipeCode" resultType="string" order="BEFORE">
            SELECT sf_new_recipe_code() AS recipeCode;
        </selectKey>
        /* 레시피등록 */
        INSERT INTO recipe_reg
        (recipe_code, recipe_name, recipe_category_code, member_id, recipe_cal, recipe_quantity, file_idx, reg_date, recipe_step1, recipe_step2, recipe_step3)
        VALUES
        (#{recipeCode}, #{recipeName}, #{recipeCategoryCode}, #{memberId}, #{recipeCal}, #{recipeQuantity}, #{fileIdx}, SYSDATE(), #{recipeStep1} ,#{recipeStep2} ,#{recipeStep3});
    </insert>

    <insert id="addRecipeIngredient" parameterType="List">
        /* 레시피 재료등록 */
        INSERT INTO recipe_ingredient
        (recipe_number, recipe_code, ingredient_code, quantity, gram, member_id, reg_time)
        VALUES
        <foreach collection="recipeIngredientList" item="item" separator=",">
            (sf_new_recipe_number(), #{item.recipeCode}, #{item.ingredientCode}, #{item.quantity}, #{item.gram}, #{item.memberId}, now())
        </foreach>

    </insert>
</mapper>